
labW3barnestr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001344  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001584  08001584  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08001584  08001584  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001584  08001584  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001588  08001588  00011588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800158c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000094  08001620  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08001620  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001785  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000560  00000000  00000000  00021849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00021ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029d0  00000000  00000000  00021f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018fb  00000000  00000000  00024958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000094a2  00000000  00000000  00026253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002f6f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006bc  00000000  00000000  0002f748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080014fc 	.word	0x080014fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	080014fc 	.word	0x080014fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <delay_ms>:
 */

#include <inttypes.h>
#include "delay.h"  //include declaration header file

void delay_ms(uint32_t n){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

	// 1ms = 16,000 ticks
	for (int i = n ; i > 0 ; i--) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	e01e      	b.n	80002fc <delay_ms+0x4c>
		// Clear value register
		*STK_VAL = 0x0000;
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <delay_ms+0x60>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
		// Store 16,000 in STK_LOAD
		*STK_LOAD = 16000;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <delay_ms+0x64>)
 80002c6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002ca:	601a      	str	r2, [r3, #0]
		// Enable clock, no prescaler, no interrupt
		*STK_CTRL |= CLKSOURCE;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <delay_ms+0x68>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <delay_ms+0x68>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]
		*STK_CTRL |= EN;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <delay_ms+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <delay_ms+0x68>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6013      	str	r3, [r2, #0]
		// Loop n times: Wait for countflag high
		int flag;
		do {
			flag = ((*STK_CTRL & (1<<16))>>16);
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <delay_ms+0x68>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	0c1b      	lsrs	r3, r3, #16
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
		} while (flag != 1);
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d1f6      	bne.n	80002e4 <delay_ms+0x34>
	for (int i = n ; i > 0 ; i--) {
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	dcdd      	bgt.n	80002be <delay_ms+0xe>
	}

}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000e018 	.word	0xe000e018
 8000314:	e000e014 	.word	0xe000e014
 8000318:	e000e010 	.word	0xe000e010

0800031c <delay_us>:

void delay_us(uint32_t n) {
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
		// 1us = 16 ticks
		for (int i = n ; i > 0 ; i--) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	e01d      	b.n	8000366 <delay_us+0x4a>
			// Clear value register
			*STK_VAL = 0x0000;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <delay_us+0x60>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
			// Store 16 in STK_LOAD
			*STK_LOAD = 16;
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <delay_us+0x64>)
 8000332:	2210      	movs	r2, #16
 8000334:	601a      	str	r2, [r3, #0]
			// Enable clock, no prescaler, no interrupt
			*STK_CTRL |= CLKSOURCE;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <delay_us+0x68>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <delay_us+0x68>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	6013      	str	r3, [r2, #0]
			*STK_CTRL |= EN;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <delay_us+0x68>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <delay_us+0x68>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6013      	str	r3, [r2, #0]
			// Loop n times: Wait for countflag high
			int flag;
			do {
				flag = ((*STK_CTRL & (1<<16))>>16);
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <delay_us+0x68>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	60bb      	str	r3, [r7, #8]
			} while (flag != 1);
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d1f6      	bne.n	800034e <delay_us+0x32>
		for (int i = n ; i > 0 ; i--) {
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3b01      	subs	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b00      	cmp	r3, #0
 800036a:	dcde      	bgt.n	800032a <delay_us+0xe>
		}
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000e018 	.word	0xe000e018
 8000380:	e000e014 	.word	0xe000e014
 8000384:	e000e010 	.word	0xe000e010

08000388 <keypad_init>:

#include "keypad.h"
#include "delay.h"


void keypad_init(){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	//Enables the port
	*RCC_AHB1ENR |= (1<<GPIOCEN);
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <keypad_init+0x38>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <keypad_init+0x38>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6013      	str	r3, [r2, #0]

	//Sets KEY0 - KEY7 as Pull-Ups
	*GPIOC_PUPDR &= ~(0xFFFF);
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <keypad_init+0x3c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a09      	ldr	r2, [pc, #36]	; (80003c4 <keypad_init+0x3c>)
 800039e:	0c1b      	lsrs	r3, r3, #16
 80003a0:	041b      	lsls	r3, r3, #16
 80003a2:	6013      	str	r3, [r2, #0]
	*GPIOC_PUPDR |= 0x5555;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <keypad_init+0x3c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <keypad_init+0x3c>)
 80003aa:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80003ae:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40023830 	.word	0x40023830
 80003c4:	4002080c 	.word	0x4002080c

080003c8 <keypad_getKeyNoBlock>:

uint8_t keypad_getKeyNoBlock(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0

	uint8_t value = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	71bb      	strb	r3, [r7, #6]
	uint8_t keycode = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	71fb      	strb	r3, [r7, #7]

	//COLS to Inputs and ROWS to Outputs
	*GPIOC_MODER &= ~(0xFFFF);
 80003d6:	4bba      	ldr	r3, [pc, #744]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4ab9      	ldr	r2, [pc, #740]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 80003dc:	0c1b      	lsrs	r3, r3, #16
 80003de:	041b      	lsls	r3, r3, #16
 80003e0:	6013      	str	r3, [r2, #0]
	*GPIOC_MODER |= 0x5500;
 80003e2:	4bb7      	ldr	r3, [pc, #732]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4ab6      	ldr	r2, [pc, #728]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 80003e8:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80003ec:	6013      	str	r3, [r2, #0]

	//Clears Rows in ODR
	*GPIOC_ODR &= ~0xFF;
 80003ee:	4bb5      	ldr	r3, [pc, #724]	; (80006c4 <keypad_getKeyNoBlock+0x2fc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4ab4      	ldr	r2, [pc, #720]	; (80006c4 <keypad_getKeyNoBlock+0x2fc>)
 80003f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80003f8:	6013      	str	r3, [r2, #0]
	//Reads COLS in IDR
	value = (*GPIOC_IDR & 0xF);
 80003fa:	4bb3      	ldr	r3, [pc, #716]	; (80006c8 <keypad_getKeyNoBlock+0x300>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 030f 	and.w	r3, r3, #15
 8000404:	71bb      	strb	r3, [r7, #6]

	//if a button is pressed decode the key
	if (value != 0xF){
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	f000 8152 	beq.w	80006b2 <keypad_getKeyNoBlock+0x2ea>
		//Copy COLS pattern from IDR to ODR
		*GPIOC_ODR &= ~0xFF;
 800040e:	4bad      	ldr	r3, [pc, #692]	; (80006c4 <keypad_getKeyNoBlock+0x2fc>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4aac      	ldr	r2, [pc, #688]	; (80006c4 <keypad_getKeyNoBlock+0x2fc>)
 8000414:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000418:	6013      	str	r3, [r2, #0]
		*GPIOC_ODR |= (*GPIOC_IDR & 0xF);
 800041a:	4bab      	ldr	r3, [pc, #684]	; (80006c8 <keypad_getKeyNoBlock+0x300>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 020f 	and.w	r2, r3, #15
 8000422:	4ba8      	ldr	r3, [pc, #672]	; (80006c4 <keypad_getKeyNoBlock+0x2fc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	49a7      	ldr	r1, [pc, #668]	; (80006c4 <keypad_getKeyNoBlock+0x2fc>)
 8000428:	4313      	orrs	r3, r2
 800042a:	600b      	str	r3, [r1, #0]

		//COLS to Output and ROWS to Inputs
		*GPIOC_MODER &= ~(0xFFFF);
 800042c:	4ba4      	ldr	r3, [pc, #656]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4aa3      	ldr	r2, [pc, #652]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 8000432:	0c1b      	lsrs	r3, r3, #16
 8000434:	041b      	lsls	r3, r3, #16
 8000436:	6013      	str	r3, [r2, #0]
		*GPIOC_MODER |= 0x0055;
 8000438:	4ba1      	ldr	r3, [pc, #644]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4aa0      	ldr	r2, [pc, #640]	; (80006c0 <keypad_getKeyNoBlock+0x2f8>)
 800043e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000442:	6013      	str	r3, [r2, #0]

		//Small delay (ensure you have this function)
		delay_us(5);
 8000444:	2005      	movs	r0, #5
 8000446:	f7ff ff69 	bl	800031c <delay_us>

		//Read ROWS from IDR
		value |= *GPIOC_IDR & 0xF0;
 800044a:	4b9f      	ldr	r3, [pc, #636]	; (80006c8 <keypad_getKeyNoBlock+0x300>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000452:	b2da      	uxtb	r2, r3
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	4313      	orrs	r3, r2
 8000458:	71bb      	strb	r3, [r7, #6]

		//Decode Key
		switch (value){
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	3b77      	subs	r3, #119	; 0x77
 800045e:	2b77      	cmp	r3, #119	; 0x77
 8000460:	f200 8124 	bhi.w	80006ac <keypad_getKeyNoBlock+0x2e4>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <keypad_getKeyNoBlock+0xa4>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	080006a7 	.word	0x080006a7
 8000470:	080006ad 	.word	0x080006ad
 8000474:	080006ad 	.word	0x080006ad
 8000478:	080006ad 	.word	0x080006ad
 800047c:	080006a1 	.word	0x080006a1
 8000480:	080006ad 	.word	0x080006ad
 8000484:	0800069b 	.word	0x0800069b
 8000488:	08000695 	.word	0x08000695
 800048c:	080006ad 	.word	0x080006ad
 8000490:	080006ad 	.word	0x080006ad
 8000494:	080006ad 	.word	0x080006ad
 8000498:	080006ad 	.word	0x080006ad
 800049c:	080006ad 	.word	0x080006ad
 80004a0:	080006ad 	.word	0x080006ad
 80004a4:	080006ad 	.word	0x080006ad
 80004a8:	080006ad 	.word	0x080006ad
 80004ac:	080006ad 	.word	0x080006ad
 80004b0:	080006ad 	.word	0x080006ad
 80004b4:	080006ad 	.word	0x080006ad
 80004b8:	080006ad 	.word	0x080006ad
 80004bc:	080006ad 	.word	0x080006ad
 80004c0:	080006ad 	.word	0x080006ad
 80004c4:	080006ad 	.word	0x080006ad
 80004c8:	080006ad 	.word	0x080006ad
 80004cc:	080006ad 	.word	0x080006ad
 80004d0:	080006ad 	.word	0x080006ad
 80004d4:	080006ad 	.word	0x080006ad
 80004d8:	080006ad 	.word	0x080006ad
 80004dc:	080006ad 	.word	0x080006ad
 80004e0:	080006ad 	.word	0x080006ad
 80004e4:	080006ad 	.word	0x080006ad
 80004e8:	080006ad 	.word	0x080006ad
 80004ec:	080006ad 	.word	0x080006ad
 80004f0:	080006ad 	.word	0x080006ad
 80004f4:	080006ad 	.word	0x080006ad
 80004f8:	080006ad 	.word	0x080006ad
 80004fc:	080006ad 	.word	0x080006ad
 8000500:	080006ad 	.word	0x080006ad
 8000504:	080006ad 	.word	0x080006ad
 8000508:	080006ad 	.word	0x080006ad
 800050c:	080006ad 	.word	0x080006ad
 8000510:	080006ad 	.word	0x080006ad
 8000514:	080006ad 	.word	0x080006ad
 8000518:	080006ad 	.word	0x080006ad
 800051c:	080006ad 	.word	0x080006ad
 8000520:	080006ad 	.word	0x080006ad
 8000524:	080006ad 	.word	0x080006ad
 8000528:	080006ad 	.word	0x080006ad
 800052c:	080006ad 	.word	0x080006ad
 8000530:	080006ad 	.word	0x080006ad
 8000534:	080006ad 	.word	0x080006ad
 8000538:	080006ad 	.word	0x080006ad
 800053c:	080006ad 	.word	0x080006ad
 8000540:	080006ad 	.word	0x080006ad
 8000544:	080006ad 	.word	0x080006ad
 8000548:	080006ad 	.word	0x080006ad
 800054c:	080006ad 	.word	0x080006ad
 8000550:	080006ad 	.word	0x080006ad
 8000554:	080006ad 	.word	0x080006ad
 8000558:	080006ad 	.word	0x080006ad
 800055c:	080006ad 	.word	0x080006ad
 8000560:	080006ad 	.word	0x080006ad
 8000564:	080006ad 	.word	0x080006ad
 8000568:	080006ad 	.word	0x080006ad
 800056c:	0800068f 	.word	0x0800068f
 8000570:	080006ad 	.word	0x080006ad
 8000574:	080006ad 	.word	0x080006ad
 8000578:	080006ad 	.word	0x080006ad
 800057c:	08000689 	.word	0x08000689
 8000580:	080006ad 	.word	0x080006ad
 8000584:	08000683 	.word	0x08000683
 8000588:	0800067d 	.word	0x0800067d
 800058c:	080006ad 	.word	0x080006ad
 8000590:	080006ad 	.word	0x080006ad
 8000594:	080006ad 	.word	0x080006ad
 8000598:	080006ad 	.word	0x080006ad
 800059c:	080006ad 	.word	0x080006ad
 80005a0:	080006ad 	.word	0x080006ad
 80005a4:	080006ad 	.word	0x080006ad
 80005a8:	080006ad 	.word	0x080006ad
 80005ac:	080006ad 	.word	0x080006ad
 80005b0:	080006ad 	.word	0x080006ad
 80005b4:	080006ad 	.word	0x080006ad
 80005b8:	080006ad 	.word	0x080006ad
 80005bc:	080006ad 	.word	0x080006ad
 80005c0:	080006ad 	.word	0x080006ad
 80005c4:	080006ad 	.word	0x080006ad
 80005c8:	080006ad 	.word	0x080006ad
 80005cc:	080006ad 	.word	0x080006ad
 80005d0:	080006ad 	.word	0x080006ad
 80005d4:	080006ad 	.word	0x080006ad
 80005d8:	080006ad 	.word	0x080006ad
 80005dc:	080006ad 	.word	0x080006ad
 80005e0:	080006ad 	.word	0x080006ad
 80005e4:	080006ad 	.word	0x080006ad
 80005e8:	080006ad 	.word	0x080006ad
 80005ec:	08000677 	.word	0x08000677
 80005f0:	080006ad 	.word	0x080006ad
 80005f4:	080006ad 	.word	0x080006ad
 80005f8:	080006ad 	.word	0x080006ad
 80005fc:	08000671 	.word	0x08000671
 8000600:	080006ad 	.word	0x080006ad
 8000604:	0800066b 	.word	0x0800066b
 8000608:	08000665 	.word	0x08000665
 800060c:	080006ad 	.word	0x080006ad
 8000610:	080006ad 	.word	0x080006ad
 8000614:	080006ad 	.word	0x080006ad
 8000618:	080006ad 	.word	0x080006ad
 800061c:	080006ad 	.word	0x080006ad
 8000620:	080006ad 	.word	0x080006ad
 8000624:	080006ad 	.word	0x080006ad
 8000628:	080006ad 	.word	0x080006ad
 800062c:	0800065f 	.word	0x0800065f
 8000630:	080006ad 	.word	0x080006ad
 8000634:	080006ad 	.word	0x080006ad
 8000638:	080006ad 	.word	0x080006ad
 800063c:	08000659 	.word	0x08000659
 8000640:	080006ad 	.word	0x080006ad
 8000644:	08000653 	.word	0x08000653
 8000648:	0800064d 	.word	0x0800064d
		case 0b11101110 : keycode = 1; break;
 800064c:	2301      	movs	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	e030      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b11101101 : keycode = 2; break;
 8000652:	2302      	movs	r3, #2
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	e02d      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b11101011 : keycode = 3; break;
 8000658:	2303      	movs	r3, #3
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	e02a      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b11100111 : keycode = 4; break;
 800065e:	2304      	movs	r3, #4
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e027      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>

		case 0b11011110 : keycode = 5; break;
 8000664:	2305      	movs	r3, #5
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	e024      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b11011101 : keycode = 6; break;
 800066a:	2306      	movs	r3, #6
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e021      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b11011011 : keycode = 7; break;
 8000670:	2307      	movs	r3, #7
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	e01e      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b11010111 : keycode = 8; break;
 8000676:	2308      	movs	r3, #8
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e01b      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>

		case 0b10111110 : keycode = 9; break;
 800067c:	2309      	movs	r3, #9
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e018      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b10111101 : keycode = 10; break;
 8000682:	230a      	movs	r3, #10
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	e015      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b10111011 : keycode = 11; break;
 8000688:	230b      	movs	r3, #11
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	e012      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b10110111 : keycode = 12; break;
 800068e:	230c      	movs	r3, #12
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e00f      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>

		case 0b01111110 : keycode = 13; break;
 8000694:	230d      	movs	r3, #13
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	e00c      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b01111101 : keycode = 14; break;
 800069a:	230e      	movs	r3, #14
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	e009      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b01111011 : keycode = 15; break;
 80006a0:	230f      	movs	r3, #15
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e006      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		case 0b01110111 : keycode = 16; break;
 80006a6:	2310      	movs	r3, #16
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	e003      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>

		default: keycode = 255;
 80006ac:	23ff      	movs	r3, #255	; 0xff
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	e000      	b.n	80006b4 <keypad_getKeyNoBlock+0x2ec>
		}
	}
 80006b2:	bf00      	nop

	return keycode;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020814 	.word	0x40020814
 80006c8:	40020810 	.word	0x40020810

080006cc <keypad_getKey>:


uint8_t keypad_getKey(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

	uint8_t key, keycode;

	keycode = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71bb      	strb	r3, [r7, #6]

	while (keycode ==  0){
 80006d6:	e010      	b.n	80006fa <keypad_getKey+0x2e>
		//Check status of keypad
		key = keypad_getKeyNoBlock();
 80006d8:	f7ff fe76 	bl	80003c8 <keypad_getKeyNoBlock>
 80006dc:	4603      	mov	r3, r0
 80006de:	71fb      	strb	r3, [r7, #7]
		if (key != 0) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d009      	beq.n	80006fa <keypad_getKey+0x2e>
			//if key is pressed save which key
			keycode = key;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	71bb      	strb	r3, [r7, #6]
			//wait for the release of the key
			while (key != 0){
 80006ea:	e003      	b.n	80006f4 <keypad_getKey+0x28>
				key = keypad_getKeyNoBlock();
 80006ec:	f7ff fe6c 	bl	80003c8 <keypad_getKeyNoBlock>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71fb      	strb	r3, [r7, #7]
			while (key != 0){
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f8      	bne.n	80006ec <keypad_getKey+0x20>
	while (keycode ==  0){
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0eb      	beq.n	80006d8 <keypad_getKey+0xc>
			}
		}
	}
	return keycode;
 8000700:	79bb      	ldrb	r3, [r7, #6]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <writeInstruction>:
#include <inttypes.h>
#include <stdio.h>



void writeInstruction(uint8_t inst) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	// Reset RS, RW, E
	*GPIOC_ODR &= ~(RS);
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <writeInstruction+0x70>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <writeInstruction+0x70>)
 800071c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000720:	6013      	str	r3, [r2, #0]
	*GPIOC_ODR &= ~(RW);
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <writeInstruction+0x70>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <writeInstruction+0x70>)
 8000728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800072c:	6013      	str	r3, [r2, #0]
	*GPIOC_ODR &= ~(E);
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <writeInstruction+0x70>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <writeInstruction+0x70>)
 8000734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000738:	6013      	str	r3, [r2, #0]
	// Set E
	*GPIOC_ODR |= (E);
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <writeInstruction+0x70>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <writeInstruction+0x70>)
 8000740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000744:	6013      	str	r3, [r2, #0]
	// Clear databus
	*GPIOA_ODR &= ~(0xFF<<4);
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <writeInstruction+0x74>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <writeInstruction+0x74>)
 800074c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000750:	6013      	str	r3, [r2, #0]
	// Set databus to passed in instruction value
	*GPIOA_ODR |= (inst<<4);
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <writeInstruction+0x74>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	4611      	mov	r1, r2
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <writeInstruction+0x74>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6013      	str	r3, [r2, #0]
	// Reset E
	*GPIOC_ODR &= ~(E);
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <writeInstruction+0x70>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <writeInstruction+0x70>)
 8000768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800076c:	6013      	str	r3, [r2, #0]
	delay_us(37);
 800076e:	2025      	movs	r0, #37	; 0x25
 8000770:	f7ff fdd4 	bl	800031c <delay_us>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40020814 	.word	0x40020814
 8000780:	40020014 	.word	0x40020014

08000784 <writeData>:

void writeData(uint8_t inst) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	// Reset RW, E
	*GPIOC_ODR &= ~(RW);
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <writeData+0x70>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <writeData+0x70>)
 8000794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000798:	6013      	str	r3, [r2, #0]
	*GPIOC_ODR &= ~(E);
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <writeData+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <writeData+0x70>)
 80007a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007a4:	6013      	str	r3, [r2, #0]
	// Set RS
	*GPIOC_ODR |= (RS);
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <writeData+0x70>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <writeData+0x70>)
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	6013      	str	r3, [r2, #0]
	// Set E
	*GPIOC_ODR |= (E);
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <writeData+0x70>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <writeData+0x70>)
 80007b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007bc:	6013      	str	r3, [r2, #0]
	// Clear databus
	*GPIOA_ODR &= ~(0xFF<<4);
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <writeData+0x74>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <writeData+0x74>)
 80007c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80007c8:	6013      	str	r3, [r2, #0]
	// Set databus to passed in instruction value
	*GPIOA_ODR |= (inst<<4);
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <writeData+0x74>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <writeData+0x74>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6013      	str	r3, [r2, #0]
	// Reset E
	*GPIOC_ODR &= ~(E);
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <writeData+0x70>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <writeData+0x70>)
 80007e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007e4:	6013      	str	r3, [r2, #0]
	delay_us(37);
 80007e6:	2025      	movs	r0, #37	; 0x25
 80007e8:	f7ff fd98 	bl	800031c <delay_us>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40020814 	.word	0x40020814
 80007f8:	40020014 	.word	0x40020014

080007fc <lcd_init>:

void lcd_init(){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

// Port Setup
	// Enable GPIO A and C in RCC
	*RCC_AHB1ENR |= (GPIOAEN||GPIOCEN);
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <lcd_init+0x90>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <lcd_init+0x90>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]
	// Set DB pins to outputs
	*GPIOA_MODER &= ~(0xFFFF<<8);
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <lcd_init+0x94>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <lcd_init+0x94>)
 8000812:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800081a:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |= (0x5555<<8);
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <lcd_init+0x94>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <lcd_init+0x94>)
 8000822:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000826:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800082a:	6013      	str	r3, [r2, #0]
	// Set RS, RW, and E pins to outputs
	*GPIOC_MODER &= ~(0x3F<<16);
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <lcd_init+0x98>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <lcd_init+0x98>)
 8000832:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000836:	6013      	str	r3, [r2, #0]
	*GPIOC_MODER |= (0x15<<16);
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <lcd_init+0x98>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a15      	ldr	r2, [pc, #84]	; (8000894 <lcd_init+0x98>)
 800083e:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 8000842:	6013      	str	r3, [r2, #0]
	// Delay for 40 ms
	delay_ms(40);
 8000844:	2028      	movs	r0, #40	; 0x28
 8000846:	f7ff fd33 	bl	80002b0 <delay_ms>

// Display Setup
	// Write Function Set
	writeInstruction(FUNCTION_SET);
 800084a:	2038      	movs	r0, #56	; 0x38
 800084c:	f7ff ff5e 	bl	800070c <writeInstruction>
	delay_us(37);
 8000850:	2025      	movs	r0, #37	; 0x25
 8000852:	f7ff fd63 	bl	800031c <delay_us>
	// Write Function Set
	writeInstruction(FUNCTION_SET);
 8000856:	2038      	movs	r0, #56	; 0x38
 8000858:	f7ff ff58 	bl	800070c <writeInstruction>
	delay_us(37);
 800085c:	2025      	movs	r0, #37	; 0x25
 800085e:	f7ff fd5d 	bl	800031c <delay_us>
	// Write Display On
	writeInstruction(DISPLAY_TOGGLE);
 8000862:	200f      	movs	r0, #15
 8000864:	f7ff ff52 	bl	800070c <writeInstruction>
	delay_us(37);
 8000868:	2025      	movs	r0, #37	; 0x25
 800086a:	f7ff fd57 	bl	800031c <delay_us>
	// Write Display Clear
	writeInstruction(DISPLAY_CLEAR);
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff4c 	bl	800070c <writeInstruction>
	delay_ms(2);
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fd1b 	bl	80002b0 <delay_ms>
	// Write Entry Mode Set
	writeInstruction(ENTRY_MODE_SET);
 800087a:	2006      	movs	r0, #6
 800087c:	f7ff ff46 	bl	800070c <writeInstruction>
	delay_us(37);
 8000880:	2025      	movs	r0, #37	; 0x25
 8000882:	f7ff fd4b 	bl	800031c <delay_us>

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023830 	.word	0x40023830
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <lcd_clear>:

void lcd_clear(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	writeInstruction(DISPLAY_CLEAR);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff ff35 	bl	800070c <writeInstruction>
	delay_ms(2);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fd04 	bl	80002b0 <delay_ms>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <lcd_set_position>:
void lcd_home() {
	writeInstruction(0x80);
	delay_ms(2);
}

void lcd_set_position(uint8_t posIndex) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	posIndex--;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	71fb      	strb	r3, [r7, #7]
	int inst = 0x80;
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
	if (posIndex > 15) {
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d906      	bls.n	80008d4 <lcd_set_position+0x28>
		inst |= (1<<6);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008cc:	60fb      	str	r3, [r7, #12]
		posIndex -= 16;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3b10      	subs	r3, #16
 80008d2:	71fb      	strb	r3, [r7, #7]
	}
	inst |= posIndex;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4313      	orrs	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
	writeInstruction(inst);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff13 	bl	800070c <writeInstruction>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <lcd_print_string>:

int lcd_print_string(char* str) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b084      	sub	sp, #16
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	int index = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
	while (str[index] != 0x00) {
 80008fa:	e009      	b.n	8000910 <lcd_print_string+0x22>
		writeData(str[index]);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff3d 	bl	8000784 <writeData>
		index++;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3301      	adds	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
	while (str[index] != 0x00) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1ef      	bne.n	80008fc <lcd_print_string+0xe>
	}
	return index;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <lcd_print_char>:

void lcd_print_char(char c) {
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
	writeData(c);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff26 	bl	8000784 <writeData>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <lcd_print_num>:


int lcd_print_num(int i){
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	char numString[17];
	sprintf(numString, "%d", i);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4907      	ldr	r1, [pc, #28]	; (800096c <lcd_print_num+0x2c>)
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f997 	bl	8000c84 <siprintf>
	return lcd_print_string(numString);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffc7 	bl	80008ee <lcd_print_string>
 8000960:	4603      	mov	r3, r0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	08001514 	.word	0x08001514

08000970 <calculate>:
char mathKeys[] = {'1','2','3','+','4','5','6','-','7','8','9','x','*','0','=','/'};
char mathNums[] = {'1','2','3','_','4','5','6','_','7','8','9','_','_','0','_','_'};
char mathOper[] = {'_','_','_','+','_','_','_','-','_','_','_','x','*','_','_','/'};
char calculation[5];

void calculate(int operand1, int operand2, char operation) {
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	4613      	mov	r3, r2
 800097c:	71fb      	strb	r3, [r7, #7]
	int result;
	switch (operation) {
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b78      	cmp	r3, #120	; 0x78
 8000982:	d010      	beq.n	80009a6 <calculate+0x36>
 8000984:	2b78      	cmp	r3, #120	; 0x78
 8000986:	dc14      	bgt.n	80009b2 <calculate+0x42>
 8000988:	2b2b      	cmp	r3, #43	; 0x2b
 800098a:	d002      	beq.n	8000992 <calculate+0x22>
 800098c:	2b2d      	cmp	r3, #45	; 0x2d
 800098e:	d005      	beq.n	800099c <calculate+0x2c>
 8000990:	e00f      	b.n	80009b2 <calculate+0x42>
		case '+':
		result = operand1 + operand2;
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4413      	add	r3, r2
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800099a:	e022      	b.n	80009e2 <calculate+0x72>
		case '-':
		result = operand1 - operand2;
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80009a4:	e01d      	b.n	80009e2 <calculate+0x72>
		case 'x':
		result = operand1 * operand2;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80009b0:	e017      	b.n	80009e2 <calculate+0x72>
		default:
		if (operand2 == 0) {
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10f      	bne.n	80009d8 <calculate+0x68>
			lcd_clear();
 80009b8:	f7ff ff6e 	bl	8000898 <lcd_clear>
			char divError[] = " Err: Undefined ";
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <calculate+0x80>)
 80009be:	f107 0410 	add.w	r4, r7, #16
 80009c2:	461d      	mov	r5, r3
 80009c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	7023      	strb	r3, [r4, #0]
			lcd_print_string(divError);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff8c 	bl	80008ee <lcd_print_string>
 80009d6:	e007      	b.n	80009e8 <calculate+0x78>
			return;
		} else {
			result = operand1 / operand2;
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	lcd_print_num(result);
 80009e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009e4:	f7ff ffac 	bl	8000940 <lcd_print_num>
}
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bdb0      	pop	{r4, r5, r7, pc}
 80009ee:	bf00      	nop
 80009f0:	08001518 	.word	0x08001518

080009f4 <inputSequence>:

void inputSequence() {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	int currentKeyIndex;
	lcd_clear();
 80009fa:	f7ff ff4d 	bl	8000898 <lcd_clear>
	int seqIndex = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]

	// While key != number, getKey
	do {
		currentKeyIndex = keypad_getKey()-1;
 8000a02:	f7ff fe63 	bl	80006cc <keypad_getKey>
 8000a06:	4603      	mov	r3, r0
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
		if (mathKeys[currentKeyIndex] == '*') {
 8000a0c:	4a5c      	ldr	r2, [pc, #368]	; (8000b80 <inputSequence+0x18c>)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b2a      	cmp	r3, #42	; 0x2a
 8000a16:	f000 80a9 	beq.w	8000b6c <inputSequence+0x178>
			return;
		}
	} while (mathKeys[currentKeyIndex] != mathNums[currentKeyIndex]);
 8000a1a:	4a59      	ldr	r2, [pc, #356]	; (8000b80 <inputSequence+0x18c>)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4958      	ldr	r1, [pc, #352]	; (8000b84 <inputSequence+0x190>)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	440b      	add	r3, r1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d1e9      	bne.n	8000a02 <inputSequence+0xe>
	calculation[seqIndex] = mathKeys[currentKeyIndex];
 8000a2e:	4a54      	ldr	r2, [pc, #336]	; (8000b80 <inputSequence+0x18c>)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	7819      	ldrb	r1, [r3, #0]
 8000a36:	4a54      	ldr	r2, [pc, #336]	; (8000b88 <inputSequence+0x194>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	701a      	strb	r2, [r3, #0]
	lcd_print_char(mathKeys[currentKeyIndex]);
 8000a40:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <inputSequence+0x18c>)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff6c 	bl	8000926 <lcd_print_char>
	seqIndex++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3301      	adds	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]

	// While key != operation, getKey
	do {
		currentKeyIndex = keypad_getKey()-1;
 8000a54:	f7ff fe3a 	bl	80006cc <keypad_getKey>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
		if(mathKeys[currentKeyIndex] == '*') {
 8000a5e:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <inputSequence+0x18c>)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b2a      	cmp	r3, #42	; 0x2a
 8000a68:	f000 8082 	beq.w	8000b70 <inputSequence+0x17c>
			return;
		}
	} while (mathKeys[currentKeyIndex] != mathOper[currentKeyIndex]);
 8000a6c:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <inputSequence+0x18c>)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4945      	ldr	r1, [pc, #276]	; (8000b8c <inputSequence+0x198>)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	440b      	add	r3, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d1e9      	bne.n	8000a54 <inputSequence+0x60>
	calculation[seqIndex] = mathKeys[currentKeyIndex];
 8000a80:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <inputSequence+0x18c>)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	7819      	ldrb	r1, [r3, #0]
 8000a88:	4a3f      	ldr	r2, [pc, #252]	; (8000b88 <inputSequence+0x194>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	460a      	mov	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
	lcd_print_char(mathKeys[currentKeyIndex]);
 8000a92:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <inputSequence+0x18c>)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff43 	bl	8000926 <lcd_print_char>
	seqIndex++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]

	// While key != number, getKey
	do {
		currentKeyIndex = keypad_getKey()-1;
 8000aa6:	f7ff fe11 	bl	80006cc <keypad_getKey>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	3b01      	subs	r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
		if(mathKeys[currentKeyIndex] == '*') {
 8000ab0:	4a33      	ldr	r2, [pc, #204]	; (8000b80 <inputSequence+0x18c>)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8000aba:	d05b      	beq.n	8000b74 <inputSequence+0x180>
			return;
		}
	} while (mathKeys[currentKeyIndex] != mathNums[currentKeyIndex]);
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <inputSequence+0x18c>)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	492f      	ldr	r1, [pc, #188]	; (8000b84 <inputSequence+0x190>)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	440b      	add	r3, r1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d1ea      	bne.n	8000aa6 <inputSequence+0xb2>
	calculation[seqIndex] = mathKeys[currentKeyIndex];
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <inputSequence+0x18c>)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	7819      	ldrb	r1, [r3, #0]
 8000ad8:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <inputSequence+0x194>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	460a      	mov	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	lcd_print_char(mathKeys[currentKeyIndex]);
 8000ae2:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <inputSequence+0x18c>)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff1b 	bl	8000926 <lcd_print_char>
	seqIndex++;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]

	// While key != '='
	do {
		currentKeyIndex = keypad_getKey()-1;
 8000af6:	f7ff fde9 	bl	80006cc <keypad_getKey>
 8000afa:	4603      	mov	r3, r0
 8000afc:	3b01      	subs	r3, #1
 8000afe:	603b      	str	r3, [r7, #0]
		if(mathKeys[currentKeyIndex] == '*') {
 8000b00:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <inputSequence+0x18c>)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b2a      	cmp	r3, #42	; 0x2a
 8000b0a:	d035      	beq.n	8000b78 <inputSequence+0x184>
			return;
		}
	} while (mathKeys[currentKeyIndex] != '=');
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <inputSequence+0x18c>)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b3d      	cmp	r3, #61	; 0x3d
 8000b16:	d1ee      	bne.n	8000af6 <inputSequence+0x102>
	lcd_print_char(mathKeys[currentKeyIndex]);
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <inputSequence+0x18c>)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff00 	bl	8000926 <lcd_print_char>
	// Calculate
	calculate(calculation[0] -= '0', calculation[2] -= '0', calculation[1]);
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <inputSequence+0x194>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	3b30      	subs	r3, #48	; 0x30
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <inputSequence+0x194>)
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <inputSequence+0x194>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <inputSequence+0x194>)
 8000b3a:	789b      	ldrb	r3, [r3, #2]
 8000b3c:	3b30      	subs	r3, #48	; 0x30
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <inputSequence+0x194>)
 8000b42:	709a      	strb	r2, [r3, #2]
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <inputSequence+0x194>)
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <inputSequence+0x194>)
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f7ff ff0e 	bl	8000970 <calculate>
	do {
		currentKeyIndex = keypad_getKey()-1;
 8000b54:	f7ff fdba 	bl	80006cc <keypad_getKey>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	603b      	str	r3, [r7, #0]
	} while (mathKeys[currentKeyIndex] != '*');
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <inputSequence+0x18c>)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b2a      	cmp	r3, #42	; 0x2a
 8000b68:	d1f4      	bne.n	8000b54 <inputSequence+0x160>
 8000b6a:	e006      	b.n	8000b7a <inputSequence+0x186>
			return;
 8000b6c:	bf00      	nop
 8000b6e:	e004      	b.n	8000b7a <inputSequence+0x186>
			return;
 8000b70:	bf00      	nop
 8000b72:	e002      	b.n	8000b7a <inputSequence+0x186>
			return;
 8000b74:	bf00      	nop
 8000b76:	e000      	b.n	8000b7a <inputSequence+0x186>
			return;
 8000b78:	bf00      	nop
}
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000010 	.word	0x20000010
 8000b88:	200000bc 	.word	0x200000bc
 8000b8c:	20000020 	.word	0x20000020

08000b90 <main>:

// main
int main(){
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0

	// Initialize Components
	keypad_init();
 8000b96:	f7ff fbf7 	bl	8000388 <keypad_init>
	lcd_init();
 8000b9a:	f7ff fe2f 	bl	80007fc <lcd_init>

	// Prompt Message
	char prompt1[]= "+- Calculator x/";
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <main+0x50>)
 8000ba0:	f107 0414 	add.w	r4, r7, #20
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	7023      	strb	r3, [r4, #0]
	char prompt2[]= "  Push any key  ";
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <main+0x54>)
 8000bb0:	463c      	mov	r4, r7
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	7023      	strb	r3, [r4, #0]
	lcd_print_string(prompt1);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe94 	bl	80008ee <lcd_print_string>
	lcd_set_position(17);
 8000bc6:	2011      	movs	r0, #17
 8000bc8:	f7ff fe70 	bl	80008ac <lcd_set_position>
	lcd_print_string(prompt2);
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe8d 	bl	80008ee <lcd_print_string>
	keypad_getKey();
 8000bd4:	f7ff fd7a 	bl	80006cc <keypad_getKey>

	while(1) {
		inputSequence();
 8000bd8:	f7ff ff0c 	bl	80009f4 <inputSequence>
 8000bdc:	e7fc      	b.n	8000bd8 <main+0x48>
 8000bde:	bf00      	nop
 8000be0:	0800152c 	.word	0x0800152c
 8000be4:	08001540 	.word	0x08001540

08000be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c12:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000c16:	f000 f811 	bl	8000c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff ffb9 	bl	8000b90 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   r0, =_estack
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000c2c:	0800158c 	.word	0x0800158c
  ldr r2, =_sbss
 8000c30:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000c34:	200000d4 	.word	0x200000d4

08000c38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <__libc_init_array>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	4d0d      	ldr	r5, [pc, #52]	; (8000c74 <__libc_init_array+0x38>)
 8000c40:	4c0d      	ldr	r4, [pc, #52]	; (8000c78 <__libc_init_array+0x3c>)
 8000c42:	1b64      	subs	r4, r4, r5
 8000c44:	10a4      	asrs	r4, r4, #2
 8000c46:	2600      	movs	r6, #0
 8000c48:	42a6      	cmp	r6, r4
 8000c4a:	d109      	bne.n	8000c60 <__libc_init_array+0x24>
 8000c4c:	4d0b      	ldr	r5, [pc, #44]	; (8000c7c <__libc_init_array+0x40>)
 8000c4e:	4c0c      	ldr	r4, [pc, #48]	; (8000c80 <__libc_init_array+0x44>)
 8000c50:	f000 fc54 	bl	80014fc <_init>
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	10a4      	asrs	r4, r4, #2
 8000c58:	2600      	movs	r6, #0
 8000c5a:	42a6      	cmp	r6, r4
 8000c5c:	d105      	bne.n	8000c6a <__libc_init_array+0x2e>
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c64:	4798      	blx	r3
 8000c66:	3601      	adds	r6, #1
 8000c68:	e7ee      	b.n	8000c48 <__libc_init_array+0xc>
 8000c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6e:	4798      	blx	r3
 8000c70:	3601      	adds	r6, #1
 8000c72:	e7f2      	b.n	8000c5a <__libc_init_array+0x1e>
 8000c74:	08001584 	.word	0x08001584
 8000c78:	08001584 	.word	0x08001584
 8000c7c:	08001584 	.word	0x08001584
 8000c80:	08001588 	.word	0x08001588

08000c84 <siprintf>:
 8000c84:	b40e      	push	{r1, r2, r3}
 8000c86:	b500      	push	{lr}
 8000c88:	b09c      	sub	sp, #112	; 0x70
 8000c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8000c8c:	9002      	str	r0, [sp, #8]
 8000c8e:	9006      	str	r0, [sp, #24]
 8000c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <siprintf+0x38>)
 8000c96:	9107      	str	r1, [sp, #28]
 8000c98:	9104      	str	r1, [sp, #16]
 8000c9a:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <siprintf+0x3c>)
 8000c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ca0:	9105      	str	r1, [sp, #20]
 8000ca2:	6800      	ldr	r0, [r0, #0]
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	a902      	add	r1, sp, #8
 8000ca8:	f000 f868 	bl	8000d7c <_svfiprintf_r>
 8000cac:	9b02      	ldr	r3, [sp, #8]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	b01c      	add	sp, #112	; 0x70
 8000cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cb8:	b003      	add	sp, #12
 8000cba:	4770      	bx	lr
 8000cbc:	20000030 	.word	0x20000030
 8000cc0:	ffff0208 	.word	0xffff0208

08000cc4 <__ssputs_r>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	688e      	ldr	r6, [r1, #8]
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	4682      	mov	sl, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4690      	mov	r8, r2
 8000cd2:	461f      	mov	r7, r3
 8000cd4:	d838      	bhi.n	8000d48 <__ssputs_r+0x84>
 8000cd6:	898a      	ldrh	r2, [r1, #12]
 8000cd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000cdc:	d032      	beq.n	8000d44 <__ssputs_r+0x80>
 8000cde:	6825      	ldr	r5, [r4, #0]
 8000ce0:	6909      	ldr	r1, [r1, #16]
 8000ce2:	eba5 0901 	sub.w	r9, r5, r1
 8000ce6:	6965      	ldr	r5, [r4, #20]
 8000ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000cec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	444b      	add	r3, r9
 8000cf4:	106d      	asrs	r5, r5, #1
 8000cf6:	429d      	cmp	r5, r3
 8000cf8:	bf38      	it	cc
 8000cfa:	461d      	movcc	r5, r3
 8000cfc:	0553      	lsls	r3, r2, #21
 8000cfe:	d531      	bpl.n	8000d64 <__ssputs_r+0xa0>
 8000d00:	4629      	mov	r1, r5
 8000d02:	f000 fb47 	bl	8001394 <_malloc_r>
 8000d06:	4606      	mov	r6, r0
 8000d08:	b950      	cbnz	r0, 8000d20 <__ssputs_r+0x5c>
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	f8ca 3000 	str.w	r3, [sl]
 8000d10:	89a3      	ldrh	r3, [r4, #12]
 8000d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d16:	81a3      	strh	r3, [r4, #12]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d20:	6921      	ldr	r1, [r4, #16]
 8000d22:	464a      	mov	r2, r9
 8000d24:	f000 fabe 	bl	80012a4 <memcpy>
 8000d28:	89a3      	ldrh	r3, [r4, #12]
 8000d2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d32:	81a3      	strh	r3, [r4, #12]
 8000d34:	6126      	str	r6, [r4, #16]
 8000d36:	6165      	str	r5, [r4, #20]
 8000d38:	444e      	add	r6, r9
 8000d3a:	eba5 0509 	sub.w	r5, r5, r9
 8000d3e:	6026      	str	r6, [r4, #0]
 8000d40:	60a5      	str	r5, [r4, #8]
 8000d42:	463e      	mov	r6, r7
 8000d44:	42be      	cmp	r6, r7
 8000d46:	d900      	bls.n	8000d4a <__ssputs_r+0x86>
 8000d48:	463e      	mov	r6, r7
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	6820      	ldr	r0, [r4, #0]
 8000d4e:	4641      	mov	r1, r8
 8000d50:	f000 fab6 	bl	80012c0 <memmove>
 8000d54:	68a3      	ldr	r3, [r4, #8]
 8000d56:	6822      	ldr	r2, [r4, #0]
 8000d58:	1b9b      	subs	r3, r3, r6
 8000d5a:	4432      	add	r2, r6
 8000d5c:	60a3      	str	r3, [r4, #8]
 8000d5e:	6022      	str	r2, [r4, #0]
 8000d60:	2000      	movs	r0, #0
 8000d62:	e7db      	b.n	8000d1c <__ssputs_r+0x58>
 8000d64:	462a      	mov	r2, r5
 8000d66:	f000 fb6f 	bl	8001448 <_realloc_r>
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d1e1      	bne.n	8000d34 <__ssputs_r+0x70>
 8000d70:	6921      	ldr	r1, [r4, #16]
 8000d72:	4650      	mov	r0, sl
 8000d74:	f000 fabe 	bl	80012f4 <_free_r>
 8000d78:	e7c7      	b.n	8000d0a <__ssputs_r+0x46>
	...

08000d7c <_svfiprintf_r>:
 8000d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d80:	4698      	mov	r8, r3
 8000d82:	898b      	ldrh	r3, [r1, #12]
 8000d84:	061b      	lsls	r3, r3, #24
 8000d86:	b09d      	sub	sp, #116	; 0x74
 8000d88:	4607      	mov	r7, r0
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4614      	mov	r4, r2
 8000d8e:	d50e      	bpl.n	8000dae <_svfiprintf_r+0x32>
 8000d90:	690b      	ldr	r3, [r1, #16]
 8000d92:	b963      	cbnz	r3, 8000dae <_svfiprintf_r+0x32>
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	f000 fafd 	bl	8001394 <_malloc_r>
 8000d9a:	6028      	str	r0, [r5, #0]
 8000d9c:	6128      	str	r0, [r5, #16]
 8000d9e:	b920      	cbnz	r0, 8000daa <_svfiprintf_r+0x2e>
 8000da0:	230c      	movs	r3, #12
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	e0d1      	b.n	8000f4e <_svfiprintf_r+0x1d2>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	616b      	str	r3, [r5, #20]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9309      	str	r3, [sp, #36]	; 0x24
 8000db2:	2320      	movs	r3, #32
 8000db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dbc:	2330      	movs	r3, #48	; 0x30
 8000dbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000f68 <_svfiprintf_r+0x1ec>
 8000dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dc6:	f04f 0901 	mov.w	r9, #1
 8000dca:	4623      	mov	r3, r4
 8000dcc:	469a      	mov	sl, r3
 8000dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dd2:	b10a      	cbz	r2, 8000dd8 <_svfiprintf_r+0x5c>
 8000dd4:	2a25      	cmp	r2, #37	; 0x25
 8000dd6:	d1f9      	bne.n	8000dcc <_svfiprintf_r+0x50>
 8000dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8000ddc:	d00b      	beq.n	8000df6 <_svfiprintf_r+0x7a>
 8000dde:	465b      	mov	r3, fp
 8000de0:	4622      	mov	r2, r4
 8000de2:	4629      	mov	r1, r5
 8000de4:	4638      	mov	r0, r7
 8000de6:	f7ff ff6d 	bl	8000cc4 <__ssputs_r>
 8000dea:	3001      	adds	r0, #1
 8000dec:	f000 80aa 	beq.w	8000f44 <_svfiprintf_r+0x1c8>
 8000df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000df2:	445a      	add	r2, fp
 8000df4:	9209      	str	r2, [sp, #36]	; 0x24
 8000df6:	f89a 3000 	ldrb.w	r3, [sl]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80a2 	beq.w	8000f44 <_svfiprintf_r+0x1c8>
 8000e00:	2300      	movs	r3, #0
 8000e02:	f04f 32ff 	mov.w	r2, #4294967295
 8000e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e0a:	f10a 0a01 	add.w	sl, sl, #1
 8000e0e:	9304      	str	r3, [sp, #16]
 8000e10:	9307      	str	r3, [sp, #28]
 8000e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e16:	931a      	str	r3, [sp, #104]	; 0x68
 8000e18:	4654      	mov	r4, sl
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e20:	4851      	ldr	r0, [pc, #324]	; (8000f68 <_svfiprintf_r+0x1ec>)
 8000e22:	f7ff f9f5 	bl	8000210 <memchr>
 8000e26:	9a04      	ldr	r2, [sp, #16]
 8000e28:	b9d8      	cbnz	r0, 8000e62 <_svfiprintf_r+0xe6>
 8000e2a:	06d0      	lsls	r0, r2, #27
 8000e2c:	bf44      	itt	mi
 8000e2e:	2320      	movmi	r3, #32
 8000e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e34:	0711      	lsls	r1, r2, #28
 8000e36:	bf44      	itt	mi
 8000e38:	232b      	movmi	r3, #43	; 0x2b
 8000e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e42:	2b2a      	cmp	r3, #42	; 0x2a
 8000e44:	d015      	beq.n	8000e72 <_svfiprintf_r+0xf6>
 8000e46:	9a07      	ldr	r2, [sp, #28]
 8000e48:	4654      	mov	r4, sl
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f04f 0c0a 	mov.w	ip, #10
 8000e50:	4621      	mov	r1, r4
 8000e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e56:	3b30      	subs	r3, #48	; 0x30
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d94e      	bls.n	8000efa <_svfiprintf_r+0x17e>
 8000e5c:	b1b0      	cbz	r0, 8000e8c <_svfiprintf_r+0x110>
 8000e5e:	9207      	str	r2, [sp, #28]
 8000e60:	e014      	b.n	8000e8c <_svfiprintf_r+0x110>
 8000e62:	eba0 0308 	sub.w	r3, r0, r8
 8000e66:	fa09 f303 	lsl.w	r3, r9, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	9304      	str	r3, [sp, #16]
 8000e6e:	46a2      	mov	sl, r4
 8000e70:	e7d2      	b.n	8000e18 <_svfiprintf_r+0x9c>
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	1d19      	adds	r1, r3, #4
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	9103      	str	r1, [sp, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfbb      	ittet	lt
 8000e7e:	425b      	neglt	r3, r3
 8000e80:	f042 0202 	orrlt.w	r2, r2, #2
 8000e84:	9307      	strge	r3, [sp, #28]
 8000e86:	9307      	strlt	r3, [sp, #28]
 8000e88:	bfb8      	it	lt
 8000e8a:	9204      	strlt	r2, [sp, #16]
 8000e8c:	7823      	ldrb	r3, [r4, #0]
 8000e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e90:	d10c      	bne.n	8000eac <_svfiprintf_r+0x130>
 8000e92:	7863      	ldrb	r3, [r4, #1]
 8000e94:	2b2a      	cmp	r3, #42	; 0x2a
 8000e96:	d135      	bne.n	8000f04 <_svfiprintf_r+0x188>
 8000e98:	9b03      	ldr	r3, [sp, #12]
 8000e9a:	1d1a      	adds	r2, r3, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	9203      	str	r2, [sp, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bfb8      	it	lt
 8000ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ea8:	3402      	adds	r4, #2
 8000eaa:	9305      	str	r3, [sp, #20]
 8000eac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f78 <_svfiprintf_r+0x1fc>
 8000eb0:	7821      	ldrb	r1, [r4, #0]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	4650      	mov	r0, sl
 8000eb6:	f7ff f9ab 	bl	8000210 <memchr>
 8000eba:	b140      	cbz	r0, 8000ece <_svfiprintf_r+0x152>
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	eba0 000a 	sub.w	r0, r0, sl
 8000ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8000ec6:	9b04      	ldr	r3, [sp, #16]
 8000ec8:	4303      	orrs	r3, r0
 8000eca:	3401      	adds	r4, #1
 8000ecc:	9304      	str	r3, [sp, #16]
 8000ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ed2:	4826      	ldr	r0, [pc, #152]	; (8000f6c <_svfiprintf_r+0x1f0>)
 8000ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ed8:	2206      	movs	r2, #6
 8000eda:	f7ff f999 	bl	8000210 <memchr>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d038      	beq.n	8000f54 <_svfiprintf_r+0x1d8>
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <_svfiprintf_r+0x1f4>)
 8000ee4:	bb1b      	cbnz	r3, 8000f2e <_svfiprintf_r+0x1b2>
 8000ee6:	9b03      	ldr	r3, [sp, #12]
 8000ee8:	3307      	adds	r3, #7
 8000eea:	f023 0307 	bic.w	r3, r3, #7
 8000eee:	3308      	adds	r3, #8
 8000ef0:	9303      	str	r3, [sp, #12]
 8000ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ef4:	4433      	add	r3, r6
 8000ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ef8:	e767      	b.n	8000dca <_svfiprintf_r+0x4e>
 8000efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8000efe:	460c      	mov	r4, r1
 8000f00:	2001      	movs	r0, #1
 8000f02:	e7a5      	b.n	8000e50 <_svfiprintf_r+0xd4>
 8000f04:	2300      	movs	r3, #0
 8000f06:	3401      	adds	r4, #1
 8000f08:	9305      	str	r3, [sp, #20]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0c0a 	mov.w	ip, #10
 8000f10:	4620      	mov	r0, r4
 8000f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f16:	3a30      	subs	r2, #48	; 0x30
 8000f18:	2a09      	cmp	r2, #9
 8000f1a:	d903      	bls.n	8000f24 <_svfiprintf_r+0x1a8>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0c5      	beq.n	8000eac <_svfiprintf_r+0x130>
 8000f20:	9105      	str	r1, [sp, #20]
 8000f22:	e7c3      	b.n	8000eac <_svfiprintf_r+0x130>
 8000f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f28:	4604      	mov	r4, r0
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e7f0      	b.n	8000f10 <_svfiprintf_r+0x194>
 8000f2e:	ab03      	add	r3, sp, #12
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	462a      	mov	r2, r5
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <_svfiprintf_r+0x1f8>)
 8000f36:	a904      	add	r1, sp, #16
 8000f38:	4638      	mov	r0, r7
 8000f3a:	f3af 8000 	nop.w
 8000f3e:	1c42      	adds	r2, r0, #1
 8000f40:	4606      	mov	r6, r0
 8000f42:	d1d6      	bne.n	8000ef2 <_svfiprintf_r+0x176>
 8000f44:	89ab      	ldrh	r3, [r5, #12]
 8000f46:	065b      	lsls	r3, r3, #25
 8000f48:	f53f af2c 	bmi.w	8000da4 <_svfiprintf_r+0x28>
 8000f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f4e:	b01d      	add	sp, #116	; 0x74
 8000f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f54:	ab03      	add	r3, sp, #12
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	462a      	mov	r2, r5
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <_svfiprintf_r+0x1f8>)
 8000f5c:	a904      	add	r1, sp, #16
 8000f5e:	4638      	mov	r0, r7
 8000f60:	f000 f87a 	bl	8001058 <_printf_i>
 8000f64:	e7eb      	b.n	8000f3e <_svfiprintf_r+0x1c2>
 8000f66:	bf00      	nop
 8000f68:	08001551 	.word	0x08001551
 8000f6c:	0800155b 	.word	0x0800155b
 8000f70:	00000000 	.word	0x00000000
 8000f74:	08000cc5 	.word	0x08000cc5
 8000f78:	08001557 	.word	0x08001557

08000f7c <_printf_common>:
 8000f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f80:	4616      	mov	r6, r2
 8000f82:	4699      	mov	r9, r3
 8000f84:	688a      	ldr	r2, [r1, #8]
 8000f86:	690b      	ldr	r3, [r1, #16]
 8000f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	bfb8      	it	lt
 8000f90:	4613      	movlt	r3, r2
 8000f92:	6033      	str	r3, [r6, #0]
 8000f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f98:	4607      	mov	r7, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	b10a      	cbz	r2, 8000fa2 <_printf_common+0x26>
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	6033      	str	r3, [r6, #0]
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	0699      	lsls	r1, r3, #26
 8000fa6:	bf42      	ittt	mi
 8000fa8:	6833      	ldrmi	r3, [r6, #0]
 8000faa:	3302      	addmi	r3, #2
 8000fac:	6033      	strmi	r3, [r6, #0]
 8000fae:	6825      	ldr	r5, [r4, #0]
 8000fb0:	f015 0506 	ands.w	r5, r5, #6
 8000fb4:	d106      	bne.n	8000fc4 <_printf_common+0x48>
 8000fb6:	f104 0a19 	add.w	sl, r4, #25
 8000fba:	68e3      	ldr	r3, [r4, #12]
 8000fbc:	6832      	ldr	r2, [r6, #0]
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	42ab      	cmp	r3, r5
 8000fc2:	dc26      	bgt.n	8001012 <_printf_common+0x96>
 8000fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fc8:	1e13      	subs	r3, r2, #0
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	bf18      	it	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	0692      	lsls	r2, r2, #26
 8000fd2:	d42b      	bmi.n	800102c <_printf_common+0xb0>
 8000fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fd8:	4649      	mov	r1, r9
 8000fda:	4638      	mov	r0, r7
 8000fdc:	47c0      	blx	r8
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d01e      	beq.n	8001020 <_printf_common+0xa4>
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	68e5      	ldr	r5, [r4, #12]
 8000fe6:	6832      	ldr	r2, [r6, #0]
 8000fe8:	f003 0306 	and.w	r3, r3, #6
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	bf08      	it	eq
 8000ff0:	1aad      	subeq	r5, r5, r2
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	6922      	ldr	r2, [r4, #16]
 8000ff6:	bf0c      	ite	eq
 8000ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ffc:	2500      	movne	r5, #0
 8000ffe:	4293      	cmp	r3, r2
 8001000:	bfc4      	itt	gt
 8001002:	1a9b      	subgt	r3, r3, r2
 8001004:	18ed      	addgt	r5, r5, r3
 8001006:	2600      	movs	r6, #0
 8001008:	341a      	adds	r4, #26
 800100a:	42b5      	cmp	r5, r6
 800100c:	d11a      	bne.n	8001044 <_printf_common+0xc8>
 800100e:	2000      	movs	r0, #0
 8001010:	e008      	b.n	8001024 <_printf_common+0xa8>
 8001012:	2301      	movs	r3, #1
 8001014:	4652      	mov	r2, sl
 8001016:	4649      	mov	r1, r9
 8001018:	4638      	mov	r0, r7
 800101a:	47c0      	blx	r8
 800101c:	3001      	adds	r0, #1
 800101e:	d103      	bne.n	8001028 <_printf_common+0xac>
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001028:	3501      	adds	r5, #1
 800102a:	e7c6      	b.n	8000fba <_printf_common+0x3e>
 800102c:	18e1      	adds	r1, r4, r3
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	2030      	movs	r0, #48	; 0x30
 8001032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001036:	4422      	add	r2, r4
 8001038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800103c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001040:	3302      	adds	r3, #2
 8001042:	e7c7      	b.n	8000fd4 <_printf_common+0x58>
 8001044:	2301      	movs	r3, #1
 8001046:	4622      	mov	r2, r4
 8001048:	4649      	mov	r1, r9
 800104a:	4638      	mov	r0, r7
 800104c:	47c0      	blx	r8
 800104e:	3001      	adds	r0, #1
 8001050:	d0e6      	beq.n	8001020 <_printf_common+0xa4>
 8001052:	3601      	adds	r6, #1
 8001054:	e7d9      	b.n	800100a <_printf_common+0x8e>
	...

08001058 <_printf_i>:
 8001058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800105c:	460c      	mov	r4, r1
 800105e:	4691      	mov	r9, r2
 8001060:	7e27      	ldrb	r7, [r4, #24]
 8001062:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001064:	2f78      	cmp	r7, #120	; 0x78
 8001066:	4680      	mov	r8, r0
 8001068:	469a      	mov	sl, r3
 800106a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800106e:	d807      	bhi.n	8001080 <_printf_i+0x28>
 8001070:	2f62      	cmp	r7, #98	; 0x62
 8001072:	d80a      	bhi.n	800108a <_printf_i+0x32>
 8001074:	2f00      	cmp	r7, #0
 8001076:	f000 80d8 	beq.w	800122a <_printf_i+0x1d2>
 800107a:	2f58      	cmp	r7, #88	; 0x58
 800107c:	f000 80a3 	beq.w	80011c6 <_printf_i+0x16e>
 8001080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001088:	e03a      	b.n	8001100 <_printf_i+0xa8>
 800108a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800108e:	2b15      	cmp	r3, #21
 8001090:	d8f6      	bhi.n	8001080 <_printf_i+0x28>
 8001092:	a001      	add	r0, pc, #4	; (adr r0, 8001098 <_printf_i+0x40>)
 8001094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001098:	080010f1 	.word	0x080010f1
 800109c:	08001105 	.word	0x08001105
 80010a0:	08001081 	.word	0x08001081
 80010a4:	08001081 	.word	0x08001081
 80010a8:	08001081 	.word	0x08001081
 80010ac:	08001081 	.word	0x08001081
 80010b0:	08001105 	.word	0x08001105
 80010b4:	08001081 	.word	0x08001081
 80010b8:	08001081 	.word	0x08001081
 80010bc:	08001081 	.word	0x08001081
 80010c0:	08001081 	.word	0x08001081
 80010c4:	08001211 	.word	0x08001211
 80010c8:	08001135 	.word	0x08001135
 80010cc:	080011f3 	.word	0x080011f3
 80010d0:	08001081 	.word	0x08001081
 80010d4:	08001081 	.word	0x08001081
 80010d8:	08001233 	.word	0x08001233
 80010dc:	08001081 	.word	0x08001081
 80010e0:	08001135 	.word	0x08001135
 80010e4:	08001081 	.word	0x08001081
 80010e8:	08001081 	.word	0x08001081
 80010ec:	080011fb 	.word	0x080011fb
 80010f0:	680b      	ldr	r3, [r1, #0]
 80010f2:	1d1a      	adds	r2, r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	600a      	str	r2, [r1, #0]
 80010f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80010fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001100:	2301      	movs	r3, #1
 8001102:	e0a3      	b.n	800124c <_printf_i+0x1f4>
 8001104:	6825      	ldr	r5, [r4, #0]
 8001106:	6808      	ldr	r0, [r1, #0]
 8001108:	062e      	lsls	r6, r5, #24
 800110a:	f100 0304 	add.w	r3, r0, #4
 800110e:	d50a      	bpl.n	8001126 <_printf_i+0xce>
 8001110:	6805      	ldr	r5, [r0, #0]
 8001112:	600b      	str	r3, [r1, #0]
 8001114:	2d00      	cmp	r5, #0
 8001116:	da03      	bge.n	8001120 <_printf_i+0xc8>
 8001118:	232d      	movs	r3, #45	; 0x2d
 800111a:	426d      	negs	r5, r5
 800111c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001120:	485e      	ldr	r0, [pc, #376]	; (800129c <_printf_i+0x244>)
 8001122:	230a      	movs	r3, #10
 8001124:	e019      	b.n	800115a <_printf_i+0x102>
 8001126:	f015 0f40 	tst.w	r5, #64	; 0x40
 800112a:	6805      	ldr	r5, [r0, #0]
 800112c:	600b      	str	r3, [r1, #0]
 800112e:	bf18      	it	ne
 8001130:	b22d      	sxthne	r5, r5
 8001132:	e7ef      	b.n	8001114 <_printf_i+0xbc>
 8001134:	680b      	ldr	r3, [r1, #0]
 8001136:	6825      	ldr	r5, [r4, #0]
 8001138:	1d18      	adds	r0, r3, #4
 800113a:	6008      	str	r0, [r1, #0]
 800113c:	0628      	lsls	r0, r5, #24
 800113e:	d501      	bpl.n	8001144 <_printf_i+0xec>
 8001140:	681d      	ldr	r5, [r3, #0]
 8001142:	e002      	b.n	800114a <_printf_i+0xf2>
 8001144:	0669      	lsls	r1, r5, #25
 8001146:	d5fb      	bpl.n	8001140 <_printf_i+0xe8>
 8001148:	881d      	ldrh	r5, [r3, #0]
 800114a:	4854      	ldr	r0, [pc, #336]	; (800129c <_printf_i+0x244>)
 800114c:	2f6f      	cmp	r7, #111	; 0x6f
 800114e:	bf0c      	ite	eq
 8001150:	2308      	moveq	r3, #8
 8001152:	230a      	movne	r3, #10
 8001154:	2100      	movs	r1, #0
 8001156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800115a:	6866      	ldr	r6, [r4, #4]
 800115c:	60a6      	str	r6, [r4, #8]
 800115e:	2e00      	cmp	r6, #0
 8001160:	bfa2      	ittt	ge
 8001162:	6821      	ldrge	r1, [r4, #0]
 8001164:	f021 0104 	bicge.w	r1, r1, #4
 8001168:	6021      	strge	r1, [r4, #0]
 800116a:	b90d      	cbnz	r5, 8001170 <_printf_i+0x118>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d04d      	beq.n	800120c <_printf_i+0x1b4>
 8001170:	4616      	mov	r6, r2
 8001172:	fbb5 f1f3 	udiv	r1, r5, r3
 8001176:	fb03 5711 	mls	r7, r3, r1, r5
 800117a:	5dc7      	ldrb	r7, [r0, r7]
 800117c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001180:	462f      	mov	r7, r5
 8001182:	42bb      	cmp	r3, r7
 8001184:	460d      	mov	r5, r1
 8001186:	d9f4      	bls.n	8001172 <_printf_i+0x11a>
 8001188:	2b08      	cmp	r3, #8
 800118a:	d10b      	bne.n	80011a4 <_printf_i+0x14c>
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	07df      	lsls	r7, r3, #31
 8001190:	d508      	bpl.n	80011a4 <_printf_i+0x14c>
 8001192:	6923      	ldr	r3, [r4, #16]
 8001194:	6861      	ldr	r1, [r4, #4]
 8001196:	4299      	cmp	r1, r3
 8001198:	bfde      	ittt	le
 800119a:	2330      	movle	r3, #48	; 0x30
 800119c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80011a4:	1b92      	subs	r2, r2, r6
 80011a6:	6122      	str	r2, [r4, #16]
 80011a8:	f8cd a000 	str.w	sl, [sp]
 80011ac:	464b      	mov	r3, r9
 80011ae:	aa03      	add	r2, sp, #12
 80011b0:	4621      	mov	r1, r4
 80011b2:	4640      	mov	r0, r8
 80011b4:	f7ff fee2 	bl	8000f7c <_printf_common>
 80011b8:	3001      	adds	r0, #1
 80011ba:	d14c      	bne.n	8001256 <_printf_i+0x1fe>
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	b004      	add	sp, #16
 80011c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c6:	4835      	ldr	r0, [pc, #212]	; (800129c <_printf_i+0x244>)
 80011c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	680e      	ldr	r6, [r1, #0]
 80011d0:	061f      	lsls	r7, r3, #24
 80011d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80011d6:	600e      	str	r6, [r1, #0]
 80011d8:	d514      	bpl.n	8001204 <_printf_i+0x1ac>
 80011da:	07d9      	lsls	r1, r3, #31
 80011dc:	bf44      	itt	mi
 80011de:	f043 0320 	orrmi.w	r3, r3, #32
 80011e2:	6023      	strmi	r3, [r4, #0]
 80011e4:	b91d      	cbnz	r5, 80011ee <_printf_i+0x196>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f023 0320 	bic.w	r3, r3, #32
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	2310      	movs	r3, #16
 80011f0:	e7b0      	b.n	8001154 <_printf_i+0xfc>
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	2378      	movs	r3, #120	; 0x78
 80011fc:	4828      	ldr	r0, [pc, #160]	; (80012a0 <_printf_i+0x248>)
 80011fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001202:	e7e3      	b.n	80011cc <_printf_i+0x174>
 8001204:	065e      	lsls	r6, r3, #25
 8001206:	bf48      	it	mi
 8001208:	b2ad      	uxthmi	r5, r5
 800120a:	e7e6      	b.n	80011da <_printf_i+0x182>
 800120c:	4616      	mov	r6, r2
 800120e:	e7bb      	b.n	8001188 <_printf_i+0x130>
 8001210:	680b      	ldr	r3, [r1, #0]
 8001212:	6826      	ldr	r6, [r4, #0]
 8001214:	6960      	ldr	r0, [r4, #20]
 8001216:	1d1d      	adds	r5, r3, #4
 8001218:	600d      	str	r5, [r1, #0]
 800121a:	0635      	lsls	r5, r6, #24
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	d501      	bpl.n	8001224 <_printf_i+0x1cc>
 8001220:	6018      	str	r0, [r3, #0]
 8001222:	e002      	b.n	800122a <_printf_i+0x1d2>
 8001224:	0671      	lsls	r1, r6, #25
 8001226:	d5fb      	bpl.n	8001220 <_printf_i+0x1c8>
 8001228:	8018      	strh	r0, [r3, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	6123      	str	r3, [r4, #16]
 800122e:	4616      	mov	r6, r2
 8001230:	e7ba      	b.n	80011a8 <_printf_i+0x150>
 8001232:	680b      	ldr	r3, [r1, #0]
 8001234:	1d1a      	adds	r2, r3, #4
 8001236:	600a      	str	r2, [r1, #0]
 8001238:	681e      	ldr	r6, [r3, #0]
 800123a:	6862      	ldr	r2, [r4, #4]
 800123c:	2100      	movs	r1, #0
 800123e:	4630      	mov	r0, r6
 8001240:	f7fe ffe6 	bl	8000210 <memchr>
 8001244:	b108      	cbz	r0, 800124a <_printf_i+0x1f2>
 8001246:	1b80      	subs	r0, r0, r6
 8001248:	6060      	str	r0, [r4, #4]
 800124a:	6863      	ldr	r3, [r4, #4]
 800124c:	6123      	str	r3, [r4, #16]
 800124e:	2300      	movs	r3, #0
 8001250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001254:	e7a8      	b.n	80011a8 <_printf_i+0x150>
 8001256:	6923      	ldr	r3, [r4, #16]
 8001258:	4632      	mov	r2, r6
 800125a:	4649      	mov	r1, r9
 800125c:	4640      	mov	r0, r8
 800125e:	47d0      	blx	sl
 8001260:	3001      	adds	r0, #1
 8001262:	d0ab      	beq.n	80011bc <_printf_i+0x164>
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	079b      	lsls	r3, r3, #30
 8001268:	d413      	bmi.n	8001292 <_printf_i+0x23a>
 800126a:	68e0      	ldr	r0, [r4, #12]
 800126c:	9b03      	ldr	r3, [sp, #12]
 800126e:	4298      	cmp	r0, r3
 8001270:	bfb8      	it	lt
 8001272:	4618      	movlt	r0, r3
 8001274:	e7a4      	b.n	80011c0 <_printf_i+0x168>
 8001276:	2301      	movs	r3, #1
 8001278:	4632      	mov	r2, r6
 800127a:	4649      	mov	r1, r9
 800127c:	4640      	mov	r0, r8
 800127e:	47d0      	blx	sl
 8001280:	3001      	adds	r0, #1
 8001282:	d09b      	beq.n	80011bc <_printf_i+0x164>
 8001284:	3501      	adds	r5, #1
 8001286:	68e3      	ldr	r3, [r4, #12]
 8001288:	9903      	ldr	r1, [sp, #12]
 800128a:	1a5b      	subs	r3, r3, r1
 800128c:	42ab      	cmp	r3, r5
 800128e:	dcf2      	bgt.n	8001276 <_printf_i+0x21e>
 8001290:	e7eb      	b.n	800126a <_printf_i+0x212>
 8001292:	2500      	movs	r5, #0
 8001294:	f104 0619 	add.w	r6, r4, #25
 8001298:	e7f5      	b.n	8001286 <_printf_i+0x22e>
 800129a:	bf00      	nop
 800129c:	08001562 	.word	0x08001562
 80012a0:	08001573 	.word	0x08001573

080012a4 <memcpy>:
 80012a4:	440a      	add	r2, r1
 80012a6:	4291      	cmp	r1, r2
 80012a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ac:	d100      	bne.n	80012b0 <memcpy+0xc>
 80012ae:	4770      	bx	lr
 80012b0:	b510      	push	{r4, lr}
 80012b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012ba:	4291      	cmp	r1, r2
 80012bc:	d1f9      	bne.n	80012b2 <memcpy+0xe>
 80012be:	bd10      	pop	{r4, pc}

080012c0 <memmove>:
 80012c0:	4288      	cmp	r0, r1
 80012c2:	b510      	push	{r4, lr}
 80012c4:	eb01 0402 	add.w	r4, r1, r2
 80012c8:	d902      	bls.n	80012d0 <memmove+0x10>
 80012ca:	4284      	cmp	r4, r0
 80012cc:	4623      	mov	r3, r4
 80012ce:	d807      	bhi.n	80012e0 <memmove+0x20>
 80012d0:	1e43      	subs	r3, r0, #1
 80012d2:	42a1      	cmp	r1, r4
 80012d4:	d008      	beq.n	80012e8 <memmove+0x28>
 80012d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80012de:	e7f8      	b.n	80012d2 <memmove+0x12>
 80012e0:	4402      	add	r2, r0
 80012e2:	4601      	mov	r1, r0
 80012e4:	428a      	cmp	r2, r1
 80012e6:	d100      	bne.n	80012ea <memmove+0x2a>
 80012e8:	bd10      	pop	{r4, pc}
 80012ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80012ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80012f2:	e7f7      	b.n	80012e4 <memmove+0x24>

080012f4 <_free_r>:
 80012f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d048      	beq.n	800138c <_free_r+0x98>
 80012fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012fe:	9001      	str	r0, [sp, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f1a1 0404 	sub.w	r4, r1, #4
 8001306:	bfb8      	it	lt
 8001308:	18e4      	addlt	r4, r4, r3
 800130a:	f000 f8d3 	bl	80014b4 <__malloc_lock>
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <_free_r+0x9c>)
 8001310:	9801      	ldr	r0, [sp, #4]
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	4615      	mov	r5, r2
 8001316:	b933      	cbnz	r3, 8001326 <_free_r+0x32>
 8001318:	6063      	str	r3, [r4, #4]
 800131a:	6014      	str	r4, [r2, #0]
 800131c:	b003      	add	sp, #12
 800131e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001322:	f000 b8cd 	b.w	80014c0 <__malloc_unlock>
 8001326:	42a3      	cmp	r3, r4
 8001328:	d90b      	bls.n	8001342 <_free_r+0x4e>
 800132a:	6821      	ldr	r1, [r4, #0]
 800132c:	1862      	adds	r2, r4, r1
 800132e:	4293      	cmp	r3, r2
 8001330:	bf04      	itt	eq
 8001332:	681a      	ldreq	r2, [r3, #0]
 8001334:	685b      	ldreq	r3, [r3, #4]
 8001336:	6063      	str	r3, [r4, #4]
 8001338:	bf04      	itt	eq
 800133a:	1852      	addeq	r2, r2, r1
 800133c:	6022      	streq	r2, [r4, #0]
 800133e:	602c      	str	r4, [r5, #0]
 8001340:	e7ec      	b.n	800131c <_free_r+0x28>
 8001342:	461a      	mov	r2, r3
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	b10b      	cbz	r3, 800134c <_free_r+0x58>
 8001348:	42a3      	cmp	r3, r4
 800134a:	d9fa      	bls.n	8001342 <_free_r+0x4e>
 800134c:	6811      	ldr	r1, [r2, #0]
 800134e:	1855      	adds	r5, r2, r1
 8001350:	42a5      	cmp	r5, r4
 8001352:	d10b      	bne.n	800136c <_free_r+0x78>
 8001354:	6824      	ldr	r4, [r4, #0]
 8001356:	4421      	add	r1, r4
 8001358:	1854      	adds	r4, r2, r1
 800135a:	42a3      	cmp	r3, r4
 800135c:	6011      	str	r1, [r2, #0]
 800135e:	d1dd      	bne.n	800131c <_free_r+0x28>
 8001360:	681c      	ldr	r4, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	6053      	str	r3, [r2, #4]
 8001366:	4421      	add	r1, r4
 8001368:	6011      	str	r1, [r2, #0]
 800136a:	e7d7      	b.n	800131c <_free_r+0x28>
 800136c:	d902      	bls.n	8001374 <_free_r+0x80>
 800136e:	230c      	movs	r3, #12
 8001370:	6003      	str	r3, [r0, #0]
 8001372:	e7d3      	b.n	800131c <_free_r+0x28>
 8001374:	6825      	ldr	r5, [r4, #0]
 8001376:	1961      	adds	r1, r4, r5
 8001378:	428b      	cmp	r3, r1
 800137a:	bf04      	itt	eq
 800137c:	6819      	ldreq	r1, [r3, #0]
 800137e:	685b      	ldreq	r3, [r3, #4]
 8001380:	6063      	str	r3, [r4, #4]
 8001382:	bf04      	itt	eq
 8001384:	1949      	addeq	r1, r1, r5
 8001386:	6021      	streq	r1, [r4, #0]
 8001388:	6054      	str	r4, [r2, #4]
 800138a:	e7c7      	b.n	800131c <_free_r+0x28>
 800138c:	b003      	add	sp, #12
 800138e:	bd30      	pop	{r4, r5, pc}
 8001390:	200000b0 	.word	0x200000b0

08001394 <_malloc_r>:
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	1ccd      	adds	r5, r1, #3
 8001398:	f025 0503 	bic.w	r5, r5, #3
 800139c:	3508      	adds	r5, #8
 800139e:	2d0c      	cmp	r5, #12
 80013a0:	bf38      	it	cc
 80013a2:	250c      	movcc	r5, #12
 80013a4:	2d00      	cmp	r5, #0
 80013a6:	4606      	mov	r6, r0
 80013a8:	db01      	blt.n	80013ae <_malloc_r+0x1a>
 80013aa:	42a9      	cmp	r1, r5
 80013ac:	d903      	bls.n	80013b6 <_malloc_r+0x22>
 80013ae:	230c      	movs	r3, #12
 80013b0:	6033      	str	r3, [r6, #0]
 80013b2:	2000      	movs	r0, #0
 80013b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b6:	f000 f87d 	bl	80014b4 <__malloc_lock>
 80013ba:	4921      	ldr	r1, [pc, #132]	; (8001440 <_malloc_r+0xac>)
 80013bc:	680a      	ldr	r2, [r1, #0]
 80013be:	4614      	mov	r4, r2
 80013c0:	b99c      	cbnz	r4, 80013ea <_malloc_r+0x56>
 80013c2:	4f20      	ldr	r7, [pc, #128]	; (8001444 <_malloc_r+0xb0>)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b923      	cbnz	r3, 80013d2 <_malloc_r+0x3e>
 80013c8:	4621      	mov	r1, r4
 80013ca:	4630      	mov	r0, r6
 80013cc:	f000 f862 	bl	8001494 <_sbrk_r>
 80013d0:	6038      	str	r0, [r7, #0]
 80013d2:	4629      	mov	r1, r5
 80013d4:	4630      	mov	r0, r6
 80013d6:	f000 f85d 	bl	8001494 <_sbrk_r>
 80013da:	1c43      	adds	r3, r0, #1
 80013dc:	d123      	bne.n	8001426 <_malloc_r+0x92>
 80013de:	230c      	movs	r3, #12
 80013e0:	6033      	str	r3, [r6, #0]
 80013e2:	4630      	mov	r0, r6
 80013e4:	f000 f86c 	bl	80014c0 <__malloc_unlock>
 80013e8:	e7e3      	b.n	80013b2 <_malloc_r+0x1e>
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	1b5b      	subs	r3, r3, r5
 80013ee:	d417      	bmi.n	8001420 <_malloc_r+0x8c>
 80013f0:	2b0b      	cmp	r3, #11
 80013f2:	d903      	bls.n	80013fc <_malloc_r+0x68>
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	441c      	add	r4, r3
 80013f8:	6025      	str	r5, [r4, #0]
 80013fa:	e004      	b.n	8001406 <_malloc_r+0x72>
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	42a2      	cmp	r2, r4
 8001400:	bf0c      	ite	eq
 8001402:	600b      	streq	r3, [r1, #0]
 8001404:	6053      	strne	r3, [r2, #4]
 8001406:	4630      	mov	r0, r6
 8001408:	f000 f85a 	bl	80014c0 <__malloc_unlock>
 800140c:	f104 000b 	add.w	r0, r4, #11
 8001410:	1d23      	adds	r3, r4, #4
 8001412:	f020 0007 	bic.w	r0, r0, #7
 8001416:	1ac2      	subs	r2, r0, r3
 8001418:	d0cc      	beq.n	80013b4 <_malloc_r+0x20>
 800141a:	1a1b      	subs	r3, r3, r0
 800141c:	50a3      	str	r3, [r4, r2]
 800141e:	e7c9      	b.n	80013b4 <_malloc_r+0x20>
 8001420:	4622      	mov	r2, r4
 8001422:	6864      	ldr	r4, [r4, #4]
 8001424:	e7cc      	b.n	80013c0 <_malloc_r+0x2c>
 8001426:	1cc4      	adds	r4, r0, #3
 8001428:	f024 0403 	bic.w	r4, r4, #3
 800142c:	42a0      	cmp	r0, r4
 800142e:	d0e3      	beq.n	80013f8 <_malloc_r+0x64>
 8001430:	1a21      	subs	r1, r4, r0
 8001432:	4630      	mov	r0, r6
 8001434:	f000 f82e 	bl	8001494 <_sbrk_r>
 8001438:	3001      	adds	r0, #1
 800143a:	d1dd      	bne.n	80013f8 <_malloc_r+0x64>
 800143c:	e7cf      	b.n	80013de <_malloc_r+0x4a>
 800143e:	bf00      	nop
 8001440:	200000b0 	.word	0x200000b0
 8001444:	200000b4 	.word	0x200000b4

08001448 <_realloc_r>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	4607      	mov	r7, r0
 800144c:	4614      	mov	r4, r2
 800144e:	460e      	mov	r6, r1
 8001450:	b921      	cbnz	r1, 800145c <_realloc_r+0x14>
 8001452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001456:	4611      	mov	r1, r2
 8001458:	f7ff bf9c 	b.w	8001394 <_malloc_r>
 800145c:	b922      	cbnz	r2, 8001468 <_realloc_r+0x20>
 800145e:	f7ff ff49 	bl	80012f4 <_free_r>
 8001462:	4625      	mov	r5, r4
 8001464:	4628      	mov	r0, r5
 8001466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001468:	f000 f830 	bl	80014cc <_malloc_usable_size_r>
 800146c:	42a0      	cmp	r0, r4
 800146e:	d20f      	bcs.n	8001490 <_realloc_r+0x48>
 8001470:	4621      	mov	r1, r4
 8001472:	4638      	mov	r0, r7
 8001474:	f7ff ff8e 	bl	8001394 <_malloc_r>
 8001478:	4605      	mov	r5, r0
 800147a:	2800      	cmp	r0, #0
 800147c:	d0f2      	beq.n	8001464 <_realloc_r+0x1c>
 800147e:	4631      	mov	r1, r6
 8001480:	4622      	mov	r2, r4
 8001482:	f7ff ff0f 	bl	80012a4 <memcpy>
 8001486:	4631      	mov	r1, r6
 8001488:	4638      	mov	r0, r7
 800148a:	f7ff ff33 	bl	80012f4 <_free_r>
 800148e:	e7e9      	b.n	8001464 <_realloc_r+0x1c>
 8001490:	4635      	mov	r5, r6
 8001492:	e7e7      	b.n	8001464 <_realloc_r+0x1c>

08001494 <_sbrk_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4d06      	ldr	r5, [pc, #24]	; (80014b0 <_sbrk_r+0x1c>)
 8001498:	2300      	movs	r3, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	f000 f81e 	bl	80014e0 <_sbrk>
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d102      	bne.n	80014ae <_sbrk_r+0x1a>
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	b103      	cbz	r3, 80014ae <_sbrk_r+0x1a>
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	200000c4 	.word	0x200000c4

080014b4 <__malloc_lock>:
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <__malloc_lock+0x8>)
 80014b6:	f000 b811 	b.w	80014dc <__retarget_lock_acquire_recursive>
 80014ba:	bf00      	nop
 80014bc:	200000cc 	.word	0x200000cc

080014c0 <__malloc_unlock>:
 80014c0:	4801      	ldr	r0, [pc, #4]	; (80014c8 <__malloc_unlock+0x8>)
 80014c2:	f000 b80c 	b.w	80014de <__retarget_lock_release_recursive>
 80014c6:	bf00      	nop
 80014c8:	200000cc 	.word	0x200000cc

080014cc <_malloc_usable_size_r>:
 80014cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014d0:	1f18      	subs	r0, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bfbc      	itt	lt
 80014d6:	580b      	ldrlt	r3, [r1, r0]
 80014d8:	18c0      	addlt	r0, r0, r3
 80014da:	4770      	bx	lr

080014dc <__retarget_lock_acquire_recursive>:
 80014dc:	4770      	bx	lr

080014de <__retarget_lock_release_recursive>:
 80014de:	4770      	bx	lr

080014e0 <_sbrk>:
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <_sbrk+0x14>)
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	4602      	mov	r2, r0
 80014e6:	b909      	cbnz	r1, 80014ec <_sbrk+0xc>
 80014e8:	4903      	ldr	r1, [pc, #12]	; (80014f8 <_sbrk+0x18>)
 80014ea:	6019      	str	r1, [r3, #0]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	4402      	add	r2, r0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4770      	bx	lr
 80014f4:	200000b8 	.word	0x200000b8
 80014f8:	200000d8 	.word	0x200000d8

080014fc <_init>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr

08001508 <_fini>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr
